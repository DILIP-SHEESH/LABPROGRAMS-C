#include <stdio.h>

void towerOfHanoi(int n, char source, char auxiliary, char destination) {
    if (n == 1)
        printf("Move disk 1 from %c to %c\n", source, destination);
    else {
        towerOfHanoi(n - 1, source, destination, auxiliary);
        printf("Move disk %d from %c to %c\n", n, source, destination);
        towerOfHanoi(n - 1, auxiliary, source, destination);
    }
}

int main() {
    int n;
    printf("Enter the number of disks: ");
    scanf("%d", &n);

    towerOfHanoi(n, 'A', 'B', 'C');

    return 0;
}




#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_SIZE 100

typedef struct {
    int top;
    int items[MAX_SIZE];
} Stack;

void push(Stack *s, int value) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(EXIT_FAILURE);
    }
    s->items[++s->top] = value;
}

int pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        exit(EXIT_FAILURE);
    }
    return s->items[s->top--];
}

int evaluateSuffixExpression(char expression[]) {
    Stack s = {.top = -1};

    for (int i = 0; expression[i]; i++) {
        if (isdigit(expression[i]))
            push(&s, expression[i] - '0');
        else {
            int operand2 = pop(&s), operand1 = pop(&s);
            switch (expression[i]) {
                case '+': push(&s, operand1 + operand2); break;
                case '-': push(&s, operand1 - operand2); break;
                case '*': push(&s, operand1 * operand2); break;
                case '/': push(&s, operand1 / operand2); break;
                case '%': push(&s, operand1 % operand2); break;
                case '^': push(&s, operand1 ^ operand2); break;
                default: exit(EXIT_FAILURE);
            }
        }
    }

    return pop(&s);
}

int main() {
    char expression[MAX_SIZE];
    printf("Enter the suffix expression: ");
    scanf("%s", expression);
    
    if (evaluateSuffixExpression(expression) != -1)
        printf("Result: %d\n", evaluateSuffixExpression(expression));

    return 0;
}
